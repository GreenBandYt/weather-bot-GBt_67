# handlers/message_handlers.py

import logging
from telegram import Update
from telegram.ext import ContextTypes

from dictionaries.text_actions import TEXT_ACTIONS
from dictionaries.callback_actions import CALLBACK_ACTIONS  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à —Å–ª–æ–≤–∞—Ä—å
from dictionaries.smart_replies import get_smart_reply
from dictionaries.states import STATE_HANDLERS
from handlers.user_handlers import get_user_state # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üõ†Ô∏è –í—ã–∑–≤–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_user_input")
    user_id = update.effective_user.id
    user_state = await get_user_state(user_id, context)  # –ß—Ç–µ–Ω–∏–µ –∏–∑ context.user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_state in STATE_HANDLERS:
        handler = STATE_HANDLERS[user_state]  # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        try:
            if callable(handler):
                logging.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_state}. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è {handler.__name__}.")
                await handler(update, context)
                return
            else:
                raise ValueError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_state} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {handler.__name__} –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_state}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

    # –ï—Å–ª–∏ user_idle, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    user_text = update.message.text.strip()
    action = TEXT_ACTIONS.get(user_text)
    if action:
        logging.info(f"üîò –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{user_text}': {action.__name__}.")
        await action(update, context)
        return

    response = get_smart_reply(user_text)
    if response:
        logging.info(f"ü§ñ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ '{user_text}': {response}.")
        await update.message.reply_text(response)
        return

    logging.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç: '{user_text}'.")
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é. ü§î"
    )

async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    """
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {callback_data}")

    # –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ callback_data
    action = CALLBACK_ACTIONS.get(callback_data)

    if action:
        try:
            await action(update, context)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {action}: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ callback_data: {callback_data}")
        await query.edit_message_text(
            "–ö–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )