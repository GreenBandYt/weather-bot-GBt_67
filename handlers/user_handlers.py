import httpx
from datetime import datetime
import logging  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logging

from utils.keyboards import get_start_keyboard  # –û—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–∞ —Å–ª—É—á–∞–π –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
from telegram import Update
from telegram.ext import ContextTypes
from config import GBt_key

from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from database.database_utils import log_query, get_statistics, get_all_logs  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É)
logging.basicConfig(level=logging.INFO)

async def handle_get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É KeyboardButton("Ô∏è –ü–æ–≥–æ–¥–∞")."""
    user_id = update.effective_user.id
    city = context.user_data.get(f"city_{user_id}", 'Smolensk')
    weather_data = await get_weather(city)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ (–±–µ–∑ "–ü–æ–¥—Ä–æ–±–Ω–æ")
    inline_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="set_city")]
    ])

    if isinstance(weather_data, dict):
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"üåÜ –ì–æ—Ä–æ–¥: {weather_data['city_name']}\n"
                                            f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {weather_data['current_time']}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                                            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']}¬∞C\n"
                                            f"ü§ó –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']}¬∞C\n"
                                            f"‚òÅÔ∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather_data['description']}\n"
                                            f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['wind_speed']} –º/—Å ({weather_data['wind_speed_kmh']} –∫–º/—á)\n"
                                            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
                                            f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                                            f"üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {weather_data['sunrise']}\n"
                                            f"üåá –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {weather_data['sunset']}",
                                       reply_markup=inline_keyboard)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=weather_data, reply_markup=inline_keyboard)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
    log_query(user_id, f"–ü–æ–≥–æ–¥–∞ –¥–ª—è {city}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")

    # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å –ø–æ—Å–ª–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ Telegram –µ—ë —Å–∫—Ä–æ—é—Ç,
    # —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –µ—ë –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    # –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç.

async def handle_statistic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É KeyboardButton(" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")."""
    stats = get_statistics()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
    response += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n\n"
    response += "–¢–æ–ø-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
    for query, count in stats['popular_queries']:
        city_name = query.replace("–ü–æ–≥–æ–¥–∞ –¥–ª—è ", "").replace("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ '", "").replace("'", "")
        response += f"- {city_name}: {count} —Ä–∞–∑\n"
    response += "\n–ó–∞–ø—Ä–æ—Å—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
    for user_id, count in stats['user_requests']:
        response += f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    response += f"\n–ü–µ—Ä–∏–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–≤: —Å {stats['time_range'][0]} –ø–æ {stats['time_range'][1] if stats['time_range'][1] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–æ" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    details_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–æ", callback_data="details")]
    ])

    await context.bot.send_message(chat_id=update.effective_chat.id, text=response, reply_markup=details_keyboard)

async def handle_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ä–æ–±–Ω–æ' –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–æ–≤ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É."""
    logs = get_all_logs()

    if not logs:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞—Ä—Ç–æ—á–∫—É)
    for log in logs:
        user_id, query, timestamp = log
        card = f"üì∞ –ó–∞–ø—Ä–æ—Å #{len(logs) - logs.index(log)}:\n"
        card += f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        card += f"üìú –ó–∞–ø—Ä–æ—Å: {query}\n"
        card += f"üïí –í—Ä–µ–º—è: {timestamp}"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=card)

from datetime import datetime, timedelta

async def get_weather(city):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={GBt_key}&units=metric&lang=ru'
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, timeout=20)
            if response.status_code == 200:
                data = response.json()
                city_name = data['name']
                temperature = data['main']['temp']
                feels_like = data['main']['feels_like']
                description = data['weather'][0]['description']
                wind_speed = data['wind']['speed']
                wind_speed_kmh = round(wind_speed * 3.6, 1)
                humidity = data['main']['humidity']
                pressure = data['main']['pressure']
                pressure_mmHg = round(pressure * 0.75006)
                sunrise = data['sys']['sunrise']
                sunset = data['sys']['sunset']
                dt = data['dt']  # –¢–µ–∫—É—â–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –æ—Ç API (–≤ UTC)
                timezone = data['timezone']  # –°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ
                current_time_utc = datetime.utcfromtimestamp(dt)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dt –≤ UTC
                current_time_local = current_time_utc + timedelta(seconds=timezone)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
                current_time = current_time_local.strftime('%H:%M:%S')

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                sunrise_time = (datetime.utcfromtimestamp(sunrise) + timedelta(seconds=timezone)).strftime('%H:%M:%S')
                sunset_time = (datetime.utcfromtimestamp(sunset) + timedelta(seconds=timezone)).strftime('%H:%M:%S')

                return {
                    "city_name": city_name,
                    "temperature": temperature,
                    "feels_like": feels_like,
                    "description": description,
                    "wind_speed": wind_speed,
                    "wind_speed_kmh": wind_speed_kmh,
                    "humidity": humidity,
                    "pressure": pressure_mmHg,
                    "sunrise": sunrise_time,
                    "sunset": sunset_time,
                    "current_time": current_time  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                }
            else:
                return f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city} (–∫–æ–¥ {response.status_code})"
    except httpx.ReadTimeout:
        return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except httpx.RequestError as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

async def handle_set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥'."""
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
    )
    await set_user_state(update.effective_user.id, "STATE_WAITING_FOR_CITY", context)  # –î–æ–±–∞–≤–ª–µ–Ω context

async def process_city_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    city = update.message.text.strip()

    # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    log_query(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ '{city}'")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ user_data
    context.user_data[f'city_{user_id}'] = city

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await set_user_state(user_id, "user_idle", context)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≥–æ—Ä–æ–¥–∞
    await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city} ")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
    weather_data = await get_weather(city)
    if isinstance(weather_data, dict):
        response = (f"üåÜ –ì–æ—Ä–æ–¥: {weather_data['city_name']}\n"
                    f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {weather_data['current_time']}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']}¬∞C\n"
                    f"ü§ó –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']}¬∞C\n"
                    f"‚òÅÔ∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather_data['description']}\n"
                    f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['wind_speed']} –º/—Å ({weather_data['wind_speed_kmh']} –∫–º/—á)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
                    f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                    f"üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {weather_data['sunrise']}\n"
                    f"üåá –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {weather_data['sunset']}")
    else:
        response = weather_data

    # –°–æ–∑–¥–∞–µ–º —Ç—É –∂–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ –∏ –≤ handle_get_weather (–±–µ–∑ "–ü–æ–¥—Ä–æ–±–Ω–æ")
    inline_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="set_city")]
    ])

    await update.message.reply_text(response, reply_markup=inline_keyboard)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏

    # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å –ø–æ—Å–ª–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ Telegram –µ—ë —Å–∫—Ä–æ—é—Ç,
    # —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –µ—ë –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    # –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç.

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
    log_query(user_id, f"–ü–æ–≥–æ–¥–∞ –¥–ª—è {city}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")

async def get_user_state(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return context.user_data.get(f"state_{user_id}", "user_idle")

async def set_user_state(user_id: int, state: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    context.user_data[f"state_{user_id}"] = state